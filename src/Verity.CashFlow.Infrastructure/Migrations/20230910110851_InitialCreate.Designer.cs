// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Verity.CashFlow.Infrastructure.Persistence;

#nullable disable

namespace Verity.CashFlow.Infrastructure.Migrations
{
    [DbContext(typeof(CashFlowContext))]
    [Migration("20230910110851_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Verity.CashFlow.Domain.Entities.Cash", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<long?>("ClosedBalanceInCents")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DateOfCash")
                        .HasColumnType("date");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<long>("StartBalanceInCents")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Cashes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("35b5b1cc-56b5-4e61-97d5-12ea4d0f72e5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfCash = new DateOnly(2023, 9, 9),
                            IsClosed = false,
                            StartBalanceInCents = 1000000L
                        });
                });

            modelBuilder.Entity("Verity.CashFlow.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<long>("AmountInCents")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CashId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DateOfTransaction")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CashId");

                    b.ToTable("Transactions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("47574087-aa72-4f1d-9b75-1bde6ef4e305"),
                            AmountInCents = 1500L,
                            CashId = new Guid("35b5b1cc-56b5-4e61-97d5-12ea4d0f72e5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfTransaction = new DateOnly(2023, 9, 9),
                            Description = "2 milks",
                            Status = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("1dce7743-56ae-4e95-861e-79f49795a48e"),
                            AmountInCents = 5000L,
                            CashId = new Guid("35b5b1cc-56b5-4e61-97d5-12ea4d0f72e5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfTransaction = new DateOnly(2023, 9, 9),
                            Description = "10 rice",
                            Status = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("80584d65-a4aa-4dd5-807a-384b9df3b95a"),
                            AmountInCents = 3000L,
                            CashId = new Guid("35b5b1cc-56b5-4e61-97d5-12ea4d0f72e5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfTransaction = new DateOnly(2023, 9, 9),
                            Description = "20 salt",
                            Status = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("9519c0a8-c2e2-4978-8cd0-820d74d264e3"),
                            AmountInCents = 2515L,
                            CashId = new Guid("35b5b1cc-56b5-4e61-97d5-12ea4d0f72e5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfTransaction = new DateOnly(2023, 9, 9),
                            Description = "1 Kg argentine apple",
                            Status = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("ddd90310-e54d-4d30-af23-5f21e951db7f"),
                            AmountInCents = 65750L,
                            CashId = new Guid("35b5b1cc-56b5-4e61-97d5-12ea4d0f72e5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfTransaction = new DateOnly(2023, 9, 9),
                            Description = "15 Kg picanha",
                            Status = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("8581bbbe-63f5-4a0f-bb13-f4f2ce44f498"),
                            AmountInCents = 20000L,
                            CashId = new Guid("35b5b1cc-56b5-4e61-97d5-12ea4d0f72e5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfTransaction = new DateOnly(2023, 9, 9),
                            Description = "Energy Bill",
                            Status = 0,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("2e3c9b55-297a-4bbe-90e9-5d2f85d3a93c"),
                            AmountInCents = 10000L,
                            CashId = new Guid("35b5b1cc-56b5-4e61-97d5-12ea4d0f72e5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateOfTransaction = new DateOnly(2023, 9, 9),
                            Description = "Water Bill",
                            Status = 0,
                            Type = 1
                        });
                });

            modelBuilder.Entity("Verity.CashFlow.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("Verity.CashFlow.Domain.Entities.Cash", "Cash")
                        .WithMany("Transactions")
                        .HasForeignKey("CashId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cash");
                });

            modelBuilder.Entity("Verity.CashFlow.Domain.Entities.Cash", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
